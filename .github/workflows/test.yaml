name: Run acceptance test

on:
    pull_request_target:
         types: [opened, synchronize, reopened]
         branches: [ main ]

jobs:
    build:
        name: Build artifacts
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Checkout
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.pull_request.head.ref }}
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  path: "chart-verifier"

            - name: Set up Python 3.x
              uses: actions/setup-python@v2
              with:
                  python-version: '3.9'

            - name: Set up Python scripts on PR branch
              working-directory: ./chart-verifier
              run: |
                  # set up python requirements and scripts on PR branch
                  python3 -m venv ve1
                  cd scripts && ../ve1/bin/pip3 install -r requirements.txt && cd ..
                  cd scripts && ../ve1/bin/python3 setup.py install && cd ..

            - name: Install oc
              id: install-oc
              run: |
                  curl -sLO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
                  tar zxvf openshift-client-linux.tar.gz oc
                  echo "::set-output name=oc-installed::true"

            - name: Build the Image
              working-directory: ./chart-verifier
              id: build_image
              run: |
                    # build and test a docker image
                    ve1/bin/build-and-test --image-name="quay.io/redhat-certification/chart-verifier" --sha-value=${GITHUB_SHA} --build-only="True"}

            - name: Login to oc
              working-directory: ./chart-verifier
              env:
                  KUBECONFIG: /tmp/ci-kubeconfig
              run: |
                  # oc login
                  API_SERVER=$( echo -n ${{ secrets.API_SERVER }} | base64 -d)
                  gpg --version
                  curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
                  if [ $GITHUB_REPOSITORY == "redhat-certification/chart-verifier" ]; then
                    ./oc login --token=${{ secrets.CLUSTER_TOKEN }} --server=${API_SERVER}
                  else
                    ./oc login --insecure-skip-tls-verify --token=${{ secrets.CLUSTER_TOKEN }} --server=${API_SERVER}
                  fi
                  ve1/bin/sa-for-chart-testing --create charts-${{ github.event.number }} --token token.txt --server ${API_SERVER}

            - name: Run the tests
              working-directory: ./chart-verifier
              env:
                  KUBECONFIG: /tmp/ci-kubeconfig
                  VERIFIER_IMAGE_TAG: ${GITHUB_SHA}
              id: run_tetst
              run: |
                   # run pytest
                   ve1/bin/pytest --log-cli-level=WARNING --tb=short

            - name: Delete Namespace
              if: ${{ steps.install-oc.outputs.oc-installed == 'true' }}
              env:
                  KUBECONFIG: /tmp/ci-kubeconfig
              run: |
                  API_SERVER=$( echo -n ${{ secrets.API_SERVER }} | base64 -d)
                  ./oc login --token=${{ secrets.CLUSTER_TOKEN }} --server=${API_SERVER}
                  ve1/bin/sa-for-chart-testing --delete charts-${{ github.event.number }}

